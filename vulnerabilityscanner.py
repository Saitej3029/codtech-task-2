import nmap
from scapy.all import sniff, TCP, IP
import requests
import json
import subprocess
import sys

# Function to install required packages
def install_packages(packages):
    for package in packages:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
            print(f"{package} installed successfully.")
        except Exception as e:
            print(f"Error installing {package}: {e}")

# List of required packages
required_packages = ['python-nmap', 'scapy', 'requests']

# Install required packages if not already installed
install_packages(required_packages)

# Function to scan ports using Nmap
def scan_ports(target_ip):
    nm = nmap.PortScanner()
    nm.scan(target_ip, '1-1024')
    open_ports = []
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            lport = nm[host][proto].keys()
            for port in lport:
                if nm[host][proto][port]['state'] == 'open':
                    open_ports.append(port)
    return open_ports

# Function to detect outdated software versions
def detect_outdated_software(open_ports, target_ip):
    # This part requires more specific implementation based on the services detected
    # For simplicity, let's assume we're checking HTTP version
    http_port = 80
    if http_port in open_ports:
        try:
            response = requests.get(f'http://{target_ip}', headers={'User-Agent': 'Mozilla/5.0'})
            server_header = response.headers.get('Server')
            if server_header:
                print(f"Server Software: {server_header}")
                # Here you can compare the version with a database of known vulnerabilities
        except Exception as e:
            print(f"Error checking HTTP version: {e}")

# Function to check for known CVEs
def check_cves(open_ports, target_ip):
    # This involves querying a CVE database like NVD or VulnDB
    # For simplicity, let's assume we have a local database or API
    cve_api_url = "https://api.example.com/cves"
    try:
        response = requests.get(cve_api_url, params={'ip': target_ip})
        if response.status_code == 200:
            cves = response.json()
            for cve in cves:
                print(f"Found CVE: {cve['id']}")
    except Exception as e:
        print(f"Error checking CVEs: {e}")

# Function for real-time network traffic monitoring using Scapy
def monitor_traffic():
    def packet_sniffer(packet):
        if packet.haslayer(TCP):
            src_ip = packet[IP].src
            dst_ip = packet[IP].dst
            src_port = packet[TCP].sport
            dst_port = packet[TCP].dport
            print(f"TCP Packet: {src_ip}:{src_port} -> {dst_ip}:{dst_port}")
    
    sniff(prn=packet_sniffer, store=False)

# Main function
def main():
    target_ip = input("Enter target IP: ")
    open_ports = scan_ports(target_ip)
    print(f"Open Ports: {open_ports}")
    
    detect_outdated_software(open_ports, target_ip)
    check_cves(open_ports, target_ip)
    
    # Start traffic monitoring in a separate thread
    import threading
    traffic_thread = threading.Thread(target=monitor_traffic)
    traffic_thread.daemon = True  # So that it stops when main program exits
    traffic_thread.start()
    
    # Keep the main thread alive to keep the program running
    while True:
        pass

if __name__ == "__main__":
    main()
