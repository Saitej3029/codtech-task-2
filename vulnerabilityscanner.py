import nmap
import requests
import re
import time
import subprocess
import pkg_resources

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target
        self.open_ports = []
        self.outdated_software = []
        self.misconfigurations = []
        self.cve_vulnerabilities = []
        self.outdated_python_libraries = []

    def scan_ports(self):
        print(f"Starting port scan on {self.target}...")
        try:
            # Using subprocess to leverage Nmap command-line optimizations
            command = f"nmap -T4 --max-retries 1 -F {self.target}"
            output = subprocess.check_output(command, shell=True).decode('utf-8')
            for line in output.splitlines():
                if 'open' in line:
                    parts = line.split()
                    port = parts[0].split('/')[0]
                    self.open_ports.append((self.target, int(port), 'tcp'))
            print(f"Port scan completed on {self.target}.")
        except subprocess.CalledProcessError as e:
            print(f"Error scanning ports: {e}")

    def check_software_versions(self):
        print(f"Checking software versions on {self.target}...")
        max_retries = 3
        retries = 0
        while retries < max_retries:
            try:
                response = requests.get(f"http://{self.target}", timeout=5)
                response.raise_for_status()  # Raise an exception for HTTP errors
                print(f"Successfully connected to {self.target}.")
                headers = response.headers
                server_header_found = False
                for key, value in headers.items():
                    if key.lower() == 'server':
                        server_header_found = True
                        server_version = value
                        print(f"Detected server: {server_version}")
                        if 'Apache' in server_version:
                            version = re.search(r'Apache\/([^ ]+)', server_version)
                            if version:
                                version = version.group(1)
                                print(f"Apache version detected: {version}")
                                if version < '2.4.7':
                                    self.outdated_software.append('Apache')
                                    self.check_cves('Apache', version)
                        elif 'nginx' in server_version:
                            version = re.search(r'nginx\/([^ ]+)', server_version)
                            if version:
                                version = version.group(1)
                                print(f"nginx version detected: {version}")
                                if version < '1.21.1':
                                    self.outdated_software.append('nginx')
                                    self.check_cves('nginx', version)
                        else:
                            print(f"No known outdated versions found for {server_version}.")
                if not server_header_found:
                    print("No 'Server' header found.")
                break  # Exit loop if successful
            except requests.exceptions.RequestException as e:
                retries += 1
                print(f"Error checking software versions (retry {retries}/{max_retries}): {e}")
                time.sleep(1)  # Wait before retrying
        else:
            print(f"Failed to check software versions after {max_retries} retries.")

    def check_python_libraries(self):
        print("Checking Python libraries for outdated versions...")
        try:
            # Install pip-audit if not already installed
            subprocess.check_call(['pip', 'install', '--upgrade', 'pip', 'pip-audit'])
            # Run pip-audit to check for vulnerabilities
            output = subprocess.check_output(['pip-audit', '-f', 'json'], shell=False).decode('utf-8')
            import json
            data = json.loads(output)
            for package in data:
                if 'vulns' in package and package['vulns']:
                    self.outdated_python_libraries.append(package['name'])
                    print(f"Outdated library: {package['name']}")
        except subprocess.CalledProcessError as e:
            print(f"Error checking Python libraries: {e}")

    def check_cves(self, software, version):
        print(f"Checking CVEs for {software} version {version}...")
        url = f"https://cve.circl.lu/api/search/{software}/{version}"
        max_retries = 3
        retries = 0
        while retries < max_retries:
            try:
                response = requests.get(url, timeout=5)
                response.raise_for_status()  # Raise an exception for HTTP errors
                if response.status_code == 200:
                    cve_data = response.json()
                    for cve in cve_data:
                        if 'id' in cve:
                            self.cve_vulnerabilities.append(cve['id'])
                break  # Exit loop if successful
            except requests.exceptions.RequestException as e:
                retries += 1
                print(f"Error checking CVEs (retry {retries}/{max_retries}): {e}")
                time.sleep(1)  # Wait before retrying
        else:
            print(f"Failed to check CVEs after {max_retries} retries.")

if __name__ == "__main__":
    target = input("Enter the target IP or hostname: ")
    scanner = VulnerabilityScanner(target)
    scanner.scan_ports()
    scanner.check_software_versions()
    scanner.check_python_libraries()
    print(f"Open Ports: {scanner.open_ports}")
    print(f"Outdated Software: {scanner.outdated_software}")
    print(f"Outdated Python Libraries: {scanner.outdated_python_libraries}")
    print(f"Known CVEs: {scanner.cve_vulnerabilities}")
