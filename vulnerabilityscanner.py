#!/usr/bin/env python3
import subprocess
import argparse
import time
import xml.etree.ElementTree as ET

def run_nmap(target, options):
    """
    Run an Nmap scan with the given options and return the XML output.
    """
    # Build the command. The '-oX -' option tells nmap to output XML to stdout.
    command = ["nmap"] + options + ["-oX", "-"] + [target]
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print("Error running nmap:")
        print(e.stderr)
        return None

def parse_nmap_xml(xml_output):
    """
    Parse Nmap XML output and extract host and port information.
    """
    results = []
    try:
        root = ET.fromstring(xml_output)
    except ET.ParseError as e:
        print("Error parsing XML output:", e)
        return results

    for host in root.findall('host'):
        # Extract the IP address (if available)
        addr_elem = host.find('address')
        address = addr_elem.attrib.get('addr') if addr_elem is not None else "Unknown"
        status_elem = host.find('status')
        status = status_elem.attrib.get('state') if status_elem is not None else "unknown"
        host_info = {"address": address, "status": status, "ports": []}

        ports_elem = host.find('ports')
        if ports_elem is not None:
            for port in ports_elem.findall('port'):
                portid = port.attrib.get('portid')
                protocol = port.attrib.get('protocol')
                state_elem = port.find('state')
                state = state_elem.attrib.get('state') if state_elem is not None else "unknown"
                service_elem = port.find('service')
                service = service_elem.attrib.get('name') if service_elem is not None else "unknown"
                
                # Check if any vulnerability scripts were run on this port.
                vuln_scripts = []
                for script in port.findall('script'):
                    script_id = script.attrib.get('id')
                    script_output = script.attrib.get('output')
                    vuln_scripts.append({"id": script_id, "output": script_output})
                
                port_info = {
                    "port": portid,
                    "protocol": protocol,
                    "state": state,
                    "service": service,
                    "vuln": vuln_scripts
                }
                host_info["ports"].append(port_info)
        results.append(host_info)
    return results

def print_scan_results(results):
    """
    Nicely format and print the scan results.
    """
    if not results:
        print("No hosts found or error parsing results.")
        return

    for host in results:
        print(f"\nHost: {host['address']} (Status: {host['status']})")
        if host["ports"]:
            for port in host["ports"]:
                print(f"  Port: {port['port']}/{port['protocol']} - {port['state']} (Service: {port['service']})")
                if port["vuln"]:
                    print("    Vulnerability Script Results:")
                    for script in port["vuln"]:
                        print(f"      {script['id']}: {script['output']}")
        else:
            print("  No open ports found.")

def main():
    parser = argparse.ArgumentParser(
        description="Full-Fledged Vulnerability Scanner using Nmap (Educational Use Only)"
    )
    parser.add_argument("target", help="Target IP address, hostname, or IP range")
    parser.add_argument(
        "--scan",
        choices=["basic", "vuln", "comprehensive"],
        default="basic",
        help=("Type of scan to perform:\n"
              "  basic - TCP SYN scan with service detection (-sS -sV)\n"
              "  vuln - Runs Nmap vulnerability scripts (--script vuln -sV)\n"
              "  comprehensive - Aggressive scan with OS, version, script scanning (-A)")
    )
    parser.add_argument(
        "--continuous",
        action="store_true",
        help="Run scans continuously at specified intervals"
    )
    parser.add_argument(
        "--interval",
        type=int,
        default=300,
        help="Interval between scans in seconds (default: 300)"
    )
    args = parser.parse_args()

    print("=== DISCLAIMER ===")
    print("This tool is for educational purposes only.")
    print("Only scan systems/networks that you have explicit permission to test!")
    print("==================\n")

    # Determine Nmap options based on scan type.
    if args.scan == "basic":
        options = ["-sS", "-sV"]
    elif args.scan == "vuln":
        options = ["--script", "vuln", "-sV"]
    elif args.scan == "comprehensive":
        options = ["-A"]
    else:
        options = ["-sS", "-sV"]

    try:
        while True:
            print(f"Running '{args.scan}' scan on {args.target}...\n")
            xml_output = run_nmap(args.target, options)
            if xml_output:
                results = parse_nmap_xml(xml_output)
                print_scan_results(results)
            else:
                print("Failed to obtain scan results.")

            if not args.continuous:
                break
            print(f"\nWaiting for {args.interval} seconds before the next scan...\n")
            time.sleep(args.interval)
    except KeyboardInterrupt:
        print("\n[INFO] Scanning interrupted by user. Exiting.")

if __name__ == "__main__":
    main()
