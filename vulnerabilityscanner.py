#!/usr/bin/env python3
"""
Network Vulnerability Scanner for Parrot OS

Features:
1. Scans a target network for active devices, open ports, and running services.
2. Checks detected service versions against a known vulnerability (CVE) database.
3. Monitors real-time network traffic using Scapy.
4. Validates target IPs or hostnames before scanning.
5. Installs required dependencies in a virtual environment if missing.
6. Implements proper error handling and timeouts.
7. Produces clean JSON output for found vulnerabilities.

Note: Ensure you have privileges to perform network scanning and packet monitoring.
"""

import sys
import os
import socket
import subprocess
import json
from datetime import datetime

# Check for required modules
import importlib

REQUIRED_PACKAGES = ["requests", "nmap", "scapy"]

def install_dependencies():
    """
    Check and install missing dependencies using pip.
    It is recommended to run this script from within a virtual environment.
    """
    for pkg in REQUIRED_PACKAGES:
        try:
            importlib.import_module(pkg)
        except ImportError:
            print(f"[INFO] '{pkg}' is not installed. Installing now...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])
    # Import packages after installation
    global requests, nmap, scapy
    requests = importlib.import_module("requests")
    nmap = importlib.import_module("nmap")
    scapy = importlib.import_module("scapy.all")

def ensure_virtualenv():
    """
    Check if the script is being run in a virtual environment.
    Warn the user if not.
    """
    if sys.prefix == sys.base_prefix:
        print("[WARNING] You are not running inside a virtual environment. "
              "It is highly recommended to use one for dependency management and safety.\n")

def validate_target(target: str) -> bool:
    """
    Validate if the provided target (IP or hostname) can be resolved.
    """
    try:
        socket.gethostbyname(target)
        return True
    except socket.error:
        return False

def scan_network(target: str) -> list:
    """
    Scan the target using nmap for open ports and service/version detection.
    Returns a list of devices with their details.
    """
    scanner = nmap.PortScanner()
    print(f"[INFO] Starting scan on target: {target} ...")
    try:
        # '-sV' enables service/version detection.
        scanner.scan(target, arguments="-sV")
    except Exception as e:
        print(f"[ERROR] Failed to scan target {target}: {e}")
        return []
    
    devices = []
    for host in scanner.all_hosts():
        host_details = {
            "ip": host,
            "hostname": scanner[host].hostname(),
            "state": scanner[host].state(),
            "open_ports": []
        }
        for protocol in scanner[host].all_protocols():
            for port in scanner[host][protocol].keys():
                port_info = scanner[host][protocol][port]
                host_details["open_ports"].append({
                    "port": port,
                    "protocol": protocol,
                    "service": port_info.get("name", ""),
                    "version": port_info.get("version", "")
                })
        devices.append(host_details)
    
    return devices

def check_vulnerabilities(devices: list) -> list:
    """
    Check each discovered service against the CVE API to look for known vulnerabilities.
    Uses the CIRCL CVE search API.
    """
    cve_api_base = "https://cve.circl.lu/api/search"
    vulnerabilities = []
    
    for device in devices:
        for port in device.get("open_ports", []):
            service = port.get("service")
            version = port.get("version")
            if service and version:
                query_url = f"{cve_api_base}/{service}/{version}"
                try:
                    response = requests.get(query_url, timeout=10)
                    if response.status_code == 200:
                        data = response.json()
                        if data and data.get("results"):
                            for cve in data["results"]:
                                vulnerabilities.append({
                                    "device_ip": device["ip"],
                                    "service": service,
                                    "version": version,
                                    "cve_id": cve.get("id", "N/A"),
                                    "description": cve.get("summary", "No description provided")
                                })
                    else:
                        print(f"[INFO] No results for {service} {version} (HTTP {response.status_code})")
                except Exception as e:
                    print(f"[ERROR] Failed to check vulnerabilities for {service} {version} on {device['ip']}: {e}")
    
    return vulnerabilities

def monitor_traffic(interface: str):
    """
    Use Scapy to monitor network traffic on the given interface.
    Prints source and destination IPs for each packet observed.
    """
    def packet_handler(packet):
        if packet.haslayer(scapy.IP):
            src_ip = packet[scapy.IP].src
            dst_ip = packet[scapy.IP].dst
            print(f"[Traffic] {src_ip} -> {dst_ip}")
    
    print(f"[INFO] Monitoring network traffic on interface '{interface}'. Press Ctrl+C to stop.")
    try:
        scapy.sniff(iface=interface, prn=packet_handler, store=False)
    except Exception as e:
        print(f"[ERROR] Failed to monitor traffic on interface {interface}: {e}")

def error_handler(func):
    """
    Decorator to catch and report errors in the wrapped function.
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            print(f"[ERROR] An error occurred in '{func.__name__}': {e}")
    return wrapper

@error_handler
def main():
    print("=== Network Vulnerability Scanner ===\n")
    
    ensure_virtualenv()
    install_dependencies()
    
    # Prompt for target
    target = input("Enter target IP or hostname: ").strip()
    if not validate_target(target):
        print("[ERROR] Invalid target provided. Exiting.")
        return
    
    # Perform network scan
    devices = scan_network(target)
    if not devices:
        print("[INFO] No devices found during the scan.")
    else:
        print(f"[INFO] Scan complete. {len(devices)} device(s) detected.")
    
    # Vulnerability check against known CVEs
    print("\n[INFO] Checking for vulnerabilities...")
    vulnerabilities = check_vulnerabilities(devices)
    
    # Structured scan results
    results = {
        "timestamp": datetime.now().isoformat(),
        "target": target,
        "devices": devices,
        "vulnerabilities": vulnerabilities
    }
    
    output_file = "scan_results.json"
    try:
        with open(output_file, "w") as f:
            json.dump(results, f, indent=4)
        print(f"\n[INFO] Scan results written to '{output_file}'.")
    except Exception as e:
        print(f"[ERROR] Could not write scan results to file: {e}")
    
    # Optional real-time traffic monitoring
    monitor_choice = input("\nDo you want to monitor real-time network traffic? (y/n): ").lower().strip()
    if monitor_choice == "y":
        interface = input("Enter the network interface to monitor (e.g., eth0): ").strip()
        monitor_traffic(interface)
    else:
        print("[INFO] Exiting program. Stay secure!")

if __name__ == "__main__":
    main()
