import os
import re
import socket
import subprocess
import sys
import venv
from scapy.all import sniff

# List of required packages
REQUIRED_PACKAGES = ["python-nmap", "requests", "scapy"]
VENV_DIR = "venv_scanner"

# Ensure virtual environment exists
def setup_virtual_env():
    if not os.path.exists(VENV_DIR):
        print("Setting up a virtual environment...")
        venv.create(VENV_DIR, with_pip=True)
    
    python_exec = os.path.join(VENV_DIR, "bin", "python") if os.name != "nt" else os.path.join(VENV_DIR, "Scripts", "python.exe")
    return python_exec

# Restart script within virtual environment if necessary
def ensure_virtual_env():
    python_exec = setup_virtual_env()
    if sys.executable != os.path.abspath(python_exec):
        print("Restarting script inside virtual environment...")
        os.execv(python_exec, [python_exec] + sys.argv)

# Install missing packages inside the virtual environment
def install_missing_packages():
    python_exec = setup_virtual_env()
    for package in REQUIRED_PACKAGES:
        try:
            __import__(package.replace("-", "_"))
        except ImportError:
            print(f"Installing missing package: {package}")
            subprocess.run([python_exec, "-m", "pip", "install", package], check=True)

ensure_virtual_env()
install_missing_packages()

import nmap
import requests

# Define minimum secure versions dynamically
MIN_VERSIONS = {
    "Apache": (2, 4, 7),
    "nginx": (1, 21, 1)
}

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target
        self.open_ports = []
        self.outdated_software = []
        self.cve_vulnerabilities = []

    def scan_ports(self):
        nm = nmap.PortScanner()
        try:
            nm.scan(self.target, '1-65535')
            for host in nm.all_hosts():
                for proto in nm[host].all_protocols():
                    for port in nm[host][proto].keys():
                        self.open_ports.append((host, port, proto, nm[host][proto][port]['state']))
        except nmap.nmap.PortScannerError as e:
            print(f"Nmap scan error: {e}")
        except Exception as e:
            print(f"Error scanning ports: {e}")

    def check_software_versions(self):
        try:
            try:
                response = requests.get(f"https://{self.target}", timeout=5)
            except requests.exceptions.RequestException:
                response = requests.get(f"http://{self.target}", timeout=5)
            
            response.raise_for_status()
            headers = response.headers
            
            if 'server' in headers:
                server_version = headers['server']
                
                for software, min_version in MIN_VERSIONS.items():
                    match = re.search(rf'{software}/(\d+\.\d+\.\d+)', server_version)
                    if match:
                        version = tuple(map(int, match.group(1).split('.')))
                        if version < min_version:
                            self.outdated_software.append((software, match.group(1)))
                            self.check_cves(software, match.group(1))
        except requests.exceptions.RequestException as e:
            print(f"Error fetching software version: {e}")

    def check_cves(self, software, version):
        url = f"https://cve.circl.lu/api/search/{software}/{version}"
        try:
            response = requests.get(url, timeout=5)
            response.raise_for_status()
            cve_data = response.json()
            if isinstance(cve_data, list) and all(isinstance(cve, dict) and 'id' in cve for cve in cve_data):
                self.cve_vulnerabilities.extend([cve['id'] for cve in cve_data])
        except requests.exceptions.RequestException as e:
            print(f"Error fetching CVE data: {e}")
        except ValueError:
            print("Invalid JSON response received from CVE API.")

# Monitor Network Traffic
def packet_sniffer(packet):
    print(f"Packet captured: {packet.summary()}")


def validate_target(target):
    try:
        ip = socket.gethostbyname(target)
        for port in [80, 443, 22]:
            try:
                with socket.create_connection((ip, port), timeout=5):
                    return True
            except (socket.error, socket.timeout):
                continue
        return False
    except socket.error:
        return False

if __name__ == "__main__":
    target = input("Enter the target IP or hostname: ").strip()
    if not target or not validate_target(target):
        print("Invalid target or unreachable host. Please enter a valid and reachable IP or hostname.")
    else:
        scanner = VulnerabilityScanner(target)
        
        print("Scanning ports...")
        scanner.scan_ports()
        
        print("Checking software versions...")
        scanner.check_software_versions()
        
        print(f"Open Ports: {scanner.open_ports}")
        print(f"Outdated Software: {scanner.outdated_software}")
        print(f"CVE Vulnerabilities: {scanner.cve_vulnerabilities}")
        
        print("Starting network monitoring...")
        sniff(prn=packet_sniffer, store=False, count=10)

