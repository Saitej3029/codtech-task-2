import nmap
import requests
import socket
import re

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target
        self.open_ports = []
        self.outdated_software = []
        self.misconfigurations = []
        self.cve_vulnerabilities = []

    def scan_ports(self):
        nm = nmap.PortScanner()
        nm.scan(self.target, '1-65535')
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = nm[host][proto].keys()
                for port in lport:
                    self.open_ports.append((host, port, proto, nm[host][proto][port]['state']))

    def check_software_versions(self):
        try:
            response = requests.get(f"http://{self.target}")
            headers = response.headers
            for key, value in headers.items():
                if key.lower() == 'server':
                    server_version = value
                    if 'Apache' in server_version:
                        version = re.search(r'Apache\/([^ ]+)', server_version).group(1)
                        if version < '2.4.7':
                            self.outdated_software.append('Apache')
                            self.check_cves('Apache', version)
                    elif 'nginx' in server_version:
                        version = re.search(r'nginx\/([^ ]+)', server_version).group(1)
                        if version < '1.21.1':
                            self.outdated_software.append('nginx')
                            self.check_cves('nginx', version)
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")

    def check_cves(self, software, version):
        url = f"https://cve.circl.lu/api/search/{software}/{version}"
        try:
            response = requests.get(url)
            if response.status_code == 200:
                cve_data = response.json()
                for cve in cve_data
