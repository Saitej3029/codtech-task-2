import nmap
import requests
import socket
import re

class VulnerabilityScanner:
    def __init__(self, target):
        self.target = target
        self.open_ports = []
        self.outdated_software = []
        self.misconfigurations = []

    def scan_ports(self):
        nm = nmap.PortScanner()
        nm.scan(self.target, '1-1000')
        for host in nm.all_hosts():
            for proto in nm[host].keys():
                lport = nm[host][proto].keys()
                for port in lport:
                    self.open_ports.append((host, port))

    def check_software_versions(self):
        try:
            response = requests.get(f"http://{self.target}")
            headers = response.headers
            for key, value in headers.items():
                if key.lower() == 'erver':
                    server_version = value
                    if 'Apache' in server_version:
                        version = re.search(r'Apache\/([^ ]+)', server_version).group(1)
                        if version < '2.4.7':
                            self.outdated_software.append('Apache')
                    elif 'nginx' in server_version:
                        version = re.search(r'nginx\/([^ ]+)', server_version).group(1)
                        if version < '1.21.1':
                            self.outdated_software.append('nginx')
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")

    def check_misconfigurations(self):
        try:
            response = requests.get(f"http://{self.target}", verify=False)
            if response.status_code == 200:
                if 'Content-Security-Policy' not in response.headers:
                    self.misconfigurations.append('Missing Content-Security-Policy header')
                if 'X-Frame-Options' not in response.headers:
                    self.misconfigurations.append('Missing X-Frame-Options header')
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")

    def run_scan(self):
        self.scan_ports()
        self.check_software_versions()
        self.check_misconfigurations()
        print("Scan Results:")
        print("Open Ports:")
        for port in self.open_ports:
            print(f"  {port[0]}:{port[1]}")
        print("Outdated Software:")
        for software in self.outdated_software:
            print(f"  {software}")
        print("Misconfigurations:")
        for misconfig in self.misconfigurations:
            print(f"  {misconfig}")

if __name__ == "__main__":
    target = input("Enter the target IP or domain: ")
    scanner = VulnerabilityScanner(target)
    scanner.run_scan()
